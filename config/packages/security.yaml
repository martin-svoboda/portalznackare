security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        insyz_provider:
            id: App\Security\InsyzUserProvider
            
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
                
        main:
            pattern: ^/
            lazy: true
            provider: insyz_provider
            custom_authenticator: App\Security\InsyzAuthenticator
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week
                path: /
                domain: ~
            logout:
                path: /api/auth/logout
                target: /
            # Pro API endpointy vrať JSON odpovědi místo redirectů
            entry_point: App\Security\ApiAuthenticationEntryPoint

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Public API endpoints
        - { path: ^/api/auth/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/status, roles: PUBLIC_ACCESS }
        - { path: ^/api/test/mssql-connection, roles: PUBLIC_ACCESS }
        - { path: ^/api/test/login-test, roles: PUBLIC_ACCESS }
        
        # Admin pages - require ROLE_ADMIN
        - { path: ^/admin, roles: ROLE_ADMIN }
        
        # Admin API endpoints - require ROLE_ADMIN
        - { path: ^/api/users, roles: ROLE_ADMIN }
        - { path: ^/api/audit-logs, roles: ROLE_ADMIN }
        - { path: ^/api/system-options, roles: ROLE_ADMIN }
        
        # User can manage own settings/preferences  
        - { path: ^/api/users/\d+/(settings|preferences), roles: ROLE_USER }
        
        # Protected API endpoints - general access
        - { path: ^/api, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
