<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Portál značkaře{% endblock %}</title>
    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="Portál Zn." />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    {% block stylesheets %}
        {{ encore_entry_link_tags('app-styles') }}
    {% endblock %}
</head>

<body>
    <div class="app-shell">
        <!-- Header -->
        <header class="app-header">
            <div class="app-header__brand">
                <button class="burger" onclick="toggleNavbar()" aria-label="Otevřít/zavřít menu">
                    <span></span>
                    <span></span>
                    <span></span>
                </button>
                <a href="{{ path('app_index') }}" class="logo flex items-center gap-2"><img src="/favicon.svg" alt="" class="w-8 h-8 -mt-2"/> <span>Portál značkaře</span></a>
            </div>
            
            <div class="app-header__actions">
                <button class="btn-icon" onclick="toggleTheme()" aria-label="Přepnout režim zobrazení" id="theme-toggle">
                    {{ tabler_icon('sun-moon', 24) }}
                </button>
                
                {% if app.user %}
                    <a href="{{ path('app_profil') }}" class="user-widget flex items-center gap-2">
                        <div class="user-widget__avatar flex items-center justify-center w-8 h-8 rounded-full bg-gray-300 dark:bg-gray-600">
                            <span>{{ app.user.jmeno|first }}{{ app.user.prijmeni|first }}</span>
                        </div>
                        <span class="hidden md:block">{{ app.user.jmeno }} {{ app.user.prijmeni }}</span>
                    </a>
                {% else %}
                    <a href="{{ path('app_login') }}" class="btn btn--primary">Přihlásit se</a>
                {% endif %}
            </div>
        </header>

        <div class="app-content">
            <!-- Navbar -->
            <nav class="app-navbar" id="navbar">
                <a href="{{ path('app_index') }}" class="nav-link {{ app.request.attributes.get('_route') == 'app_index' ? 'active' : '' }}">
                    {{ tabler_icon('home') }}
                    {% if app.user %}Nástěnka{% else %}Úvod{% endif %}
                </a>
                
                <a href="{{ path('app_metodika') }}" class="nav-link {{ app.request.attributes.get('_route') == 'app_metodika' ? 'active' : '' }}">
                    {{ tabler_icon('book') }}
                    Metodika
                </a>
                
                <a href="{{ path('app_downloads') }}" class="nav-link {{ app.request.attributes.get('_route') == 'app_downloads' ? 'active' : '' }}">
                    {{ tabler_icon('download') }}
                    Ke stažení
                </a>

                {% if app.user %}
                    <div class="nav-divider"></div>

                    <a href="{{ path('app_prikazy') }}" class="nav-link {{ app.request.attributes.get('_route') starts with 'app_prikaz' ? 'active' : '' }}">
                        {{ tabler_icon('clipboard-list') }}
                        Příkazy
                    </a>
                    
                    <a href="{{ path('app_profil') }}" class="nav-link {{ app.request.attributes.get('_route') == 'app_profil' ? 'active' : '' }}">
                        {{ tabler_icon('user') }}
                        Profil
                    </a>
                    
                    <div class="nav-divider"></div>
                    
                    <a href="{{ path('help_index') }}" class="nav-link {{ app.request.attributes.get('_route') starts with 'help_' ? 'active' : '' }}">
                        {{ tabler_icon('help') }}
                        Nápověda
                    </a>
                    
                    {% if is_granted('ROLE_ADMIN') %}
                        <div class="nav-divider"></div>
                        
                        <a href="{{ path('admin_dashboard') }}" class="nav-link {{ app.request.attributes.get('_route') starts with 'admin_' ? 'active' : '' }}">
                            {{ tabler_icon('settings') }}
                            Administrace
                        </a>
                    {% endif %}
                {% endif %}
            </nav>

            <!-- Main content -->
            <main class="app-main">
                {% block body %}{% endblock %}
            </main>
        </div>
    </div>

    <script>
        // Debug configuration - matches debug.js ENV variables
        window.DEBUG_CONFIG = {
            apps: {{ app.request.server.get('DEBUG_APPS') == 'true' ? 'true' : 'false' }},
            php: {{ app.request.server.get('DEBUG_PHP') == 'true' ? 'true' : 'false' }},
            log: {{ app.request.server.get('DEBUG_LOG') == 'true' ? 'true' : 'false' }}
        };
        
        // Pokročilé console logování pro Twig šablony
        window.debugTwig = {
            log: function(component, message, data) {
                if (!window.DEBUG_CONFIG.apps) return;
                
                const timestamp = new Date().toLocaleTimeString('cs-CZ');
                const style = 'color: #10b981; background: #f0fdf4; padding: 2px 6px; border-radius: 3px; font-weight: bold;';
                
                if (data) {
                    console.groupCollapsed(`%c[TWIG:${component}] ${timestamp} - ${message}`, style);
                    console.table(data);
                    console.groupEnd();
                } else {
                    console.log(`%c[TWIG:${component}] ${timestamp} - ${message}`, style);
                }
            },
            
            render: function(component, templateName, data) {
                if (!window.DEBUG_CONFIG.apps) return;
                
                this.log(component, `Renderování šablony: ${templateName}`, data);
            },
            
            mount: function(appName, elementSelector, data) {
                if (!window.DEBUG_CONFIG.apps) return;
                
                this.log('MOUNT', `React aplikace "${appName}" připojena na "${elementSelector}"`, data);
            },
            
            error: function(component, message, error) {
                // Chyby se logují vždy bez ohledu na debug nastavení
                const timestamp = new Date().toLocaleTimeString('cs-CZ');
                const style = 'color: #dc2626; background: #fef2f2; padding: 2px 6px; border-radius: 3px; font-weight: bold;';
                
                console.error(`%c[TWIG:${component}] ${timestamp} - CHYBA: ${message}`, style);
                if (error) console.error(error);
            }
        };
        
        // Theme toggle - cycles through auto -> light -> dark -> auto...
        async function toggleTheme() {
            // Zjisti současný stav z globální proměnné nebo fallback
            const currentTheme = window.currentThemeMode || {% if app.user %}'{{ user_theme_mode() }}'{% else %}localStorage.getItem('theme') || 'auto'{% endif %};

            let newTheme;
            switch(currentTheme) {
                case 'auto':
                    newTheme = 'light';
                    break;
                case 'light':
                    newTheme = 'dark';
                    break;
                case 'dark':
                    newTheme = 'auto';
                    break;
                default:
                    newTheme = 'auto';
            }

            // Aplikuj nové téma
            window.applyTheme(newTheme);
            // Ikona se zobrazuje podle theme mode, ne podle aplikovaného tématu
            updateThemeIcon(newTheme);

            {% if app.user %}
                // Pro přihlášené uživatele ulož do user preferences
                try {
                    await fetch('/api/portal/user/preferences/theme_mode', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ value: newTheme })
                    });

                    // Aktualizuj současný theme mode pro další toggle
                    window.currentThemeMode = newTheme;

                    // Oznám React komponentám změnu
                    window.dispatchEvent(new CustomEvent('themeChanged', { detail: { theme: newTheme } }));
                } catch (error) {
                    console.warn('Nepodařilo se uložit theme preference:', error);
                }
            {% else %}
                // Pro nepřihlášené uživatele ulož do localStorage
                localStorage.setItem('theme', newTheme);
                window.currentThemeMode = newTheme;
            {% endif %}
        }

        // Update theme icon based on current state
        function updateThemeIcon(theme) {
            const toggleBtn = document.getElementById('theme-toggle');
            if (!toggleBtn) return;

            const iconMap = {
                'auto': 'sun-moon',
                'light': 'sun',
                'dark': 'moon'
            };

            const iconName = iconMap[theme] || 'sun-moon';
            toggleBtn.innerHTML = `<svg class="icon icon-tabler icon-tabler-${iconName}" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><use href="/images/tabler-sprite.svg#tabler-${iconName}"></use></svg>`;
        }

        // Helper funkce pro detekci systémového dark mode
        function getSystemTheme() {
            return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }

        // Helper funkce pro aplikaci tématu - přidat do window pro React komponenty
        window.applyTheme = function(theme) {
            const html = document.documentElement;
            html.classList.remove('light', 'dark');

            let finalTheme = theme;
            if (theme === 'auto') {
                finalTheme = getSystemTheme();
            }

            if (finalTheme === 'dark') {
                html.classList.add('dark');
            }
        };

        // Load theme on page load
        {% if app.user %}
            // Pro přihlášené uživatele načti z user preferences
            const userTheme = '{{ user_theme_mode() }}';
            window.currentThemeMode = userTheme; // Uchovej aktuální mode
            window.applyTheme(userTheme);
            updateThemeIcon(userTheme);
        {% else %}
            // Pro nepřihlášené uživatele načti z localStorage nebo použij default 'auto'
            const savedTheme = localStorage.getItem('theme') || 'auto';
            window.currentThemeMode = savedTheme; // Uchovej aktuální mode
            window.applyTheme(savedTheme);
            updateThemeIcon(savedTheme);
        {% endif %}

        // Pokud je nastaveno 'auto', poslouchej změny systémového tématu
        const currentTheme = {% if app.user %}'{{ user_theme_mode() }}'{% else %}localStorage.getItem('theme') || 'auto'{% endif %};
        if (currentTheme === 'auto') {
            const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
            mediaQuery.addListener((e) => {
                window.applyTheme('auto');
            });
        }
        
        // Navbar toggle
            function toggleNavbar() {
                const navbar = document.getElementById('navbar');
                navbar.classList.toggle('open');
            }
            
            // Close navbar on mobile when clicking outside
            document.addEventListener('click', function(e) {
                const navbar = document.getElementById('navbar');
                const burger = document.querySelector('.burger');
                
                if (window.innerWidth < 768 && 
                    !navbar.contains(e.target) && 
                    !burger.contains(e.target) && 
                    navbar.classList.contains('open')) {
                    navbar.classList.remove('open');
                }
            });
    </script>

    {% block javascripts %}
        {# JavaScript entries budou načítány podle potřeby v konkrétních šablonách #}
    {% endblock %}
    
    {# Toast systém - globální kontejner #}
    {{ encore_entry_script_tags('toast-system') }}
</body>
</html>