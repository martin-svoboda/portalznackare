name: Sync Documentation to Wiki

on:
  push:
    branches: [main]
    paths: ['docs/**', 'user-docs/**']
  workflow_dispatch:

jobs:
  sync-wiki:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Checkout wiki repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
          path: wiki/
          token: ${{ secrets.WIKI_TOKEN || secrets.GITHUB_TOKEN }}
          
      - name: Sync docs to wiki
        run: |
          # Remove old wiki content (except .git)
          find wiki/ -type f -name "*.md" -delete
          
          # Copy docs to wiki with flattened structure (GitHub Wiki requirement)
          if [ -d "docs" ]; then
            # Copy main README as Home
            if [ -f "docs/README.md" ]; then
              cp "docs/README.md" "wiki/Home.md"
            fi
            
            # Copy all other files with folder prefixes (exclude CLAUDE.md)
            find docs/ -name "*.md" -not -name "README.md" -not -name "CLAUDE.md" | while read file; do
              # Convert path to flat name: docs/backend/znacky-a-tim-nahledy.md -> backend-znacky-a-tim-nahledy.md
              wiki_name=$(echo "$file" | sed 's|docs/||' | sed 's|/|-|g')
              cp "$file" "wiki/$wiki_name"
            done
          fi
          
          # Copy user-docs to wiki (flattened with user-docs prefix)
          if [ -d "user-docs" ]; then
            # Copy markdown files
            find user-docs/ -name "*.md" | while read file; do
              wiki_name=$(echo "$file" | sed 's|/|-|g')
              cp "$file" "wiki/$wiki_name"
            done
            
            # Copy images and assets
            if [ -d "user-docs/assets" ]; then
              echo "Copying user-docs assets to wiki..."
              cp -r user-docs/assets wiki/user-docs-assets
            fi
          fi
          
          # Intelligent conversion of markdown links to wiki format
          echo "Converting internal links to wiki format..."
          
          # Create conversion script
          cat > convert-links.py << 'PYTHON_EOF'
          import os
          import re
          import glob
          
          # Mapping of file paths to wiki page names (flattened structure)
          file_to_wiki = {
              'overview.md': 'overview',
              
              # Architecture
              'architecture/principles.md': 'architecture-principles',
              'architecture/hybrid-architecture.md': 'architecture-hybrid-architecture',
              'architecture/data-flow.md': 'architecture-data-flow',
              'architecture/cms.md': 'architecture-cms',
              
              # Features
              'features/insys-integration.md': 'features-insys-integration',
              'features/authentication.md': 'features-authentication',
              'features/file-management.md': 'features-file-management',
              'features/hlaseni-prikazu.md': 'features-hlaseni-prikazu',
              'features/prikazy-management.md': 'features-prikazy-management',
              'features/visual-components.md': 'features-visual-components',
              
              # API
              'api/overview.md': 'api-overview',
              'api/insys-api.md': 'api-insys-api',
              'api/portal-api.md': 'api-portal-api',
              'api/file-api.md': 'api-file-api',
              'api/authentication-api.md': 'api-authentication-api',
              'api/test-api.md': 'api-test-api',
              
              # Configuration
              'configuration/environment.md': 'configuration-environment',
              'configuration/security.md': 'configuration-security',
              'configuration/services.md': 'configuration-services',
              
              # Topics
              'topics/czech-localization.md': 'topics-czech-localization',
              'topics/content-management.md': 'topics-content-management',
              
              # Legacy frontend/backend (if still exists)
              'frontend/architecture.md': 'frontend-architecture',
              'frontend/build-system.md': 'frontend-build-system',
              'frontend/styling.md': 'frontend-styling',
              'frontend/components.md': 'frontend-components',
              'backend/overview.md': 'backend-overview',
              'backend/services.md': 'backend-services',
              'backend/znacky-a-tim-nahledy.md': 'backend-znacky-a-tim-nahledy',
              
              # Getting started & deployment
              'getting-started/installation.md': 'getting-started-installation',
              'deployment/overview.md': 'deployment-overview',
              'migration/wordpress.md': 'migration-wordpress',
              
              # User docs
              '../user-docs/overview.md': 'user-docs-overview',
              'user-docs/overview.md': 'user-docs-overview',
              '../user-docs/getting-started/first-login.md': 'user-docs-getting-started-first-login',
              'user-docs/getting-started/first-login.md': 'user-docs-getting-started-first-login'
          }
          
          def convert_links(content):
              # Convert markdown links [text](path.md) to wiki links [[text|page-name]]
              def replace_link(match):
                  text = match.group(1)
                  path = match.group(2)
                  
                  # Remove leading dots and slashes
                  clean_path = path.lstrip('./')
                  
                  # Look up wiki page name
                  if clean_path in file_to_wiki:
                      wiki_page = file_to_wiki[clean_path]
                      return f'[[{text}|{wiki_page}]]'
                  elif path in file_to_wiki:
                      wiki_page = file_to_wiki[path]
                      return f'[[{text}|{wiki_page}]]'
                  else:
                      # Keep original link if no mapping found
                      return match.group(0)
              
              # Convert images ![alt](assets/images/path) to user-docs-assets/images/path
              def replace_image(match):
                  alt = match.group(1)
                  path = match.group(2)
                  
                  # Convert assets/ paths to user-docs-assets/
                  if path.startswith('assets/'):
                      new_path = 'user-docs-' + path
                      return f'![{alt}]({new_path})'
                  
                  return match.group(0)
              
              # Pattern to match [text](path.md) links
              pattern = r'\[([^\]]+)\]\(([^)]+\.md)\)'
              content = re.sub(pattern, replace_link, content)
              
              # Pattern to match ![alt](image) images  
              image_pattern = r'!\[([^\]]*)\]\(([^)]+)\)'
              content = re.sub(image_pattern, replace_image, content)
              
              return content
          
          # Process all markdown files in wiki directory
          for filepath in glob.glob('wiki/**/*.md', recursive=True):
              print(f"Processing {filepath}")
              with open(filepath, 'r', encoding='utf-8') as f:
                  content = f.read()
              
              converted = convert_links(content)
              
              with open(filepath, 'w', encoding='utf-8') as f:
                  f.write(converted)
          
          print("Link conversion completed")
          PYTHON_EOF
          
          # Run the conversion
          python3 convert-links.py
          rm convert-links.py
          
          # Create wiki sidebar navigation
          cat > wiki/_Sidebar.md << 'EOF'
          ## 📖 Dokumentace
          
          ### 📋 Základní informace
          - [[Úvod|Home]]
          - [[Přehled projektu|overview]]
          - [[Instalace a setup|getting-started-installation]]
          
          ### 🏗️ Architektura
          - [[Principy a konvence|architecture-principles]]
          - [[Hybridní architektura|architecture-hybrid-architecture]]
          - [[Tok dat|architecture-data-flow]]
          - [[CMS architektura|architecture-cms]]
          
          ### ⭐ Funkcionalita
          - [[INSYS integrace|features-insys-integration]]
          - [[Autentifikace|features-authentication]]
          - [[Správa souborů|features-file-management]]
          - [[Hlášení příkazů|features-hlaseni-prikazu]]
          - [[Správa příkazů|features-prikazy-management]]
          - [[Vizuální komponenty|features-visual-components]]
          
          ### 🔌 API
          - [[API přehled|api-overview]]
          - [[INSYS API|api-insys-api]]
          - [[Portal API|api-portal-api]]
          - [[File API|api-file-api]]
          - [[Authentication API|api-authentication-api]]
          - [[Test API|api-test-api]]
          
          ### ⚙️ Konfigurace
          - [[Environment|configuration-environment]]
          - [[Security|configuration-security]]
          - [[Services & DI|configuration-services]]
          
          ### 📚 Témata
          - [[České skloňování|topics-czech-localization]]
          - [[Content Management|topics-content-management]]
          
          ### 🎨 Frontend
          - [[Architektura|frontend-architecture]]
          - [[Build systém|frontend-build-system]]
          - [[Styling|frontend-styling]]
          - [[Komponenty|frontend-components]]
          
          ### 🔄 Migrace & Deployment
          - [[Z WordPress|migration-wordpress]]
          - [[Deployment přehled|deployment-overview]]
          
          ### 👥 Uživatelská nápověda
          - [[Nápověda|user-docs-overview]]
          - [[První přihlášení|user-docs-getting-started-first-login]]
          EOF
          
      - name: Commit and push to wiki
        run: |
          cd wiki/
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git commit -m "🤖 Auto-sync documentation from main branch"
          
          # Try to push with better error handling
          if ! git push; then
            echo "❌ Failed to push to wiki repository"
            echo "This usually means the WIKI_TOKEN secret is missing or has insufficient permissions."
            echo ""
            echo "To fix this:"
            echo "1. Go to GitHub Settings → Developer settings → Personal access tokens"
            echo "2. Create a new token with 'repo' and 'workflow' permissions"
            echo "3. Add it as WIKI_TOKEN secret in repository settings"
            echo ""
            echo "Current token being used: ${{ secrets.WIKI_TOKEN && 'WIKI_TOKEN (custom)' || 'GITHUB_TOKEN (default)' }}"
            exit 1
          fi
          
          echo "✅ Wiki synchronized successfully"