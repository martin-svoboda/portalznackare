name: Deploy Portal Znaƒçka≈ôe

on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  deploy:
    runs-on: ubuntu-22.04
    env:
      SSH_SERVER: 37.235.105.56
      SSH_USER: root
      SSH_PORT: 22
      DEV_PATH: /www/hosting/portalznackare.cz/dev/
      PROD_PATH: /www/hosting/portalznackare.cz/www/
      IS_TAG: ${{ startsWith(github.ref, 'refs/tags/') }}
      IS_MAIN: ${{ github.ref == 'refs/heads/main' }}
      APP_VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: ctype, iconv, json, pdo, pdo_pgsql, pdo_sqlsrv
          coverage: none
          tools: composer:v2

      - name: Set up Composer cache
        uses: actions/cache@v3
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies (DEV)
        if: env.IS_MAIN == 'true'
        run: |
          composer install --optimize-autoloader --no-interaction
          composer dump-autoload --optimize

      - name: Install Composer dependencies (PROD)
        if: env.IS_TAG == 'true'
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction
          composer dump-autoload --optimize --no-dev

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build frontend assets
        run: |
          npm run build

      - name: Prepare deployment files
        run: |
          # ≈Ω√°dn√© .env.local zde nevytv√°≈ô√≠me!
          # .env.local mus√≠ b√Ωt vytvo≈ôen ruƒçnƒõ na serveru s citliv√Ωmi √∫daji
          echo "‚úÖ Using .env defaults, server must have .env.local configured"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa -p $SSH_PORT $SSH_SERVER >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          # Test SSH connection
          echo "Testing SSH connection..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o BatchMode=yes $SSH_USER@$SSH_SERVER "echo 'SSH connection successful'"

      - name: Deploy to DEV (main branch)
        if: env.IS_MAIN == 'true'
        run: |
          # Sync soubory (bez vendor a node_modules - ty se nainstaluj√≠ na serveru)
          rsync -av --delete -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            --exclude=".git" \
            --exclude=".gitignore" \
            --exclude=".github" \
            --exclude="node_modules" \
            --exclude="var/cache" \
            --exclude="var/log" \
            --exclude="var/testdata.json" \
            --exclude=".env.local*" \
            --exclude="README.md" \
            --exclude="Claude.md" \
            --exclude="*.md" \
            --exclude="vendor" \
            . $SSH_USER@$SSH_SERVER:$DEV_PATH

          # Remote commands na DEV serveru
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $SSH_USER@$SSH_SERVER << 'EOF'
          set -euxo pipefail
          cd ${{ env.DEV_PATH }}
          
          # Nastav spr√°vn√° opr√°vnƒõn√≠
          chown -R www-data:www-data .
          find . -type d -exec chmod 755 {} \;
          find . -type f -exec chmod 644 {} \;
          chmod +x bin/console
          
          # Check if composer exists and install if needed
          if ! command -v composer &> /dev/null; then
            echo "Installing Composer..."
            curl -sS https://getcomposer.org/installer | php
            mv composer.phar /usr/local/bin/composer
            chmod +x /usr/local/bin/composer
          fi
          
          # Composer install na serveru (DEV - vƒçetnƒõ dev dependencies)
          composer install --optimize-autoloader --no-interaction
          
          # Zkontroluj ≈æe existuje .env.local s DB √∫daji
          if [ ! -f .env.local ]; then
            echo "‚ùå Missing .env.local file with database credentials!"
            echo "Please create .env.local on server with:"
            echo "USE_TEST_DATA=false"
            echo "INSYS_DB_HOST=your_server"
            echo "INSYS_DB_NAME=your_database"
            echo "INSYS_DB_USER=your_user"
            echo "INSYS_DB_PASS=your_password"
            echo "DATABASE_URL=postgresql://..."
            exit 1
          fi
          
          # Symfony deployment (DEV environment)
          php bin/console cache:clear --env=dev
          php bin/console doctrine:migrations:migrate --no-interaction --env=dev || echo "‚ö†Ô∏è Migration skipped (DB not available)"
          
          # Nastav writable adres√°≈ôe
          chmod -R 777 var/cache var/log public/build 2>/dev/null || true
          
          echo "‚úÖ DEV deployment completed"
          EOF

      - name: Deploy to PROD (tagged release)
        if: env.IS_TAG == 'true'
        run: |
          # Backup produkce p≈ôed deployment
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $SSH_USER@$SSH_SERVER << 'EOF'
          if [ -d ${{ env.PROD_PATH }} ]; then
            cp -r ${{ env.PROD_PATH }} /backup/portal-znackare-$(date +%Y%m%d-%H%M%S)
            echo "‚úÖ Production backup created"
          fi
          EOF

          # Sync soubory na produkci
          rsync -av --delete -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            --exclude=".git" \
            --exclude=".gitignore" \
            --exclude=".github" \
            --exclude="node_modules" \
            --exclude="var/cache" \
            --exclude="var/log" \
            --exclude="var/testdata.json" \
            --exclude=".env.local*" \
            --exclude="README.md" \
            --exclude="Claude.md" \
            --exclude="*.md" \
            --exclude="vendor" \
            . $SSH_USER@$SSH_SERVER:$PROD_PATH

          # Remote commands na PROD serveru
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $SSH_USER@$SSH_SERVER << 'EOF'
          set -euxo pipefail
          cd ${{ env.PROD_PATH }}
          
          # Nastav spr√°vn√° opr√°vnƒõn√≠
          chown -R www-data:www-data .
          find . -type d -exec chmod 755 {} \;
          find . -type f -exec chmod 644 {} \;
          chmod +x bin/console
          
          # Check if composer exists and install if needed
          if ! command -v composer &> /dev/null; then
            echo "Installing Composer..."
            curl -sS https://getcomposer.org/installer | php
            mv composer.phar /usr/local/bin/composer
            chmod +x /usr/local/bin/composer
          fi
          
          # Composer install na serveru (PROD - bez dev dependencies)
          composer install --no-dev --optimize-autoloader --no-interaction
          
          # Zkontroluj ≈æe existuje .env.local s DB √∫daji
          if [ ! -f .env.local ]; then
            echo "‚ùå Missing .env.local file with database credentials!"
            echo "Please create .env.local on server with:"
            echo "USE_TEST_DATA=false"
            echo "INSYS_DB_HOST=your_server"
            echo "INSYS_DB_NAME=your_database"
            echo "INSYS_DB_USER=your_user"
            echo "INSYS_DB_PASS=your_password"
            echo "DATABASE_URL=postgresql://..."
            exit 1
          fi
          
          # Symfony deployment
          php bin/console cache:clear --env=prod
          php bin/console doctrine:migrations:migrate --no-interaction --env=prod || echo "‚ö†Ô∏è Migration skipped (DB not available)"
          
          # Nastav writable adres√°≈ôe
          chmod -R 777 var/cache var/log public/build 2>/dev/null || true
          
          # Restart PHP-FPM pokud pot≈ôeba
          systemctl reload php8.2-fpm 2>/dev/null || true
          
          echo "‚úÖ PROD deployment completed"
          EOF

      - name: Health check DEV
        if: env.IS_MAIN == 'true'
        run: |
          sleep 10
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://dev.portalznackare.cz/api/test/insys-user || echo "000")
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå DEV health check failed with HTTP $HTTP_CODE"
            exit 1
          else
            echo "‚úÖ DEV health check passed"
          fi

      - name: Health check PROD
        if: env.IS_TAG == 'true'
        run: |
          sleep 10
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://portalznackare.cz/api/test/insys-user || echo "000")
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå PROD health check failed with HTTP $HTTP_CODE"
            echo "üîÑ Rolling back..."
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $SSH_USER@$SSH_SERVER << 'EOF'
            BACKUP_DIR=$(ls -td /backup/portal-znackare-* 2>/dev/null | head -1)
            if [ -n "$BACKUP_DIR" ]; then
              rm -rf ${{ env.PROD_PATH }}
              cp -r "$BACKUP_DIR" ${{ env.PROD_PATH }}
              echo "‚úÖ Rollback completed"
            fi
            EOF
            exit 1
          else
            echo "‚úÖ PROD health check passed"
          fi

      - name: Create GitHub Release (only for tag)
        if: env.IS_TAG == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Portal Znaƒçka≈ôe ${{ github.ref_name }}"
          body: |
            ## üöÄ Nov√° verze Portal Znaƒçka≈ôe
            
            **Verze:** ${{ github.ref_name }}
            **Datum:** ${{ github.event.head_commit.timestamp }}
            
            ### Zmƒõny v t√©to verzi
            ${{ github.event.head_commit.message }}
            
            ### Deployment
            - ‚úÖ Nasazeno na produkci: https://portalznackare.cz
            - ‚úÖ API endpointy ovƒõ≈ôeny
            - ‚úÖ Health check pro≈°el

          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa